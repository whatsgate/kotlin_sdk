/**
 * API whatsgate.ru
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CheckBody
import io.swagger.client.models.Error
import io.swagger.client.models.GetchatsBody
import io.swagger.client.models.InlineResponse200
import io.swagger.client.models.InlineResponse2001
import io.swagger.client.models.InlineResponse2002
import io.swagger.client.models.InlineResponse2004
import io.swagger.client.models.SeenBody
import io.swagger.client.models.SendBody

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "https://whatsgate.ru/v1") : ApiClient(basePath) {

    /**
     * Проверка зарегистрирован ли номер в WhatsApp
     * 
     * @param body Проверяет, зарегистрирован ли указанный номер в WhatsApp. Номер указывается в формате только цифр, например 79999999999 
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun checkPost(body: CheckBody): InlineResponse2001 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/check"
        )
        val response = request<InlineResponse2001>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Возвращает список активных чатов
     * 
     * @param body Запрашивает и возвращает список активных чатов, включая контакты и группы. В объекте группы находится идентификатор группы, список всех участников группы, права участников (является ли участник администратором группы). 
     * @return InlineResponse2002
     */
    @Suppress("UNCHECKED_CAST")
    fun getChatsPost(body: GetchatsBody): InlineResponse2002 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/get-chats"
        )
        val response = request<InlineResponse2002>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Отправляет команду в чат, что последние сообщения просмотрены
     * 
     * @param body Команда устанавливает у всех сообщений в указанном чате статус просмотрены. 
     * @return InlineResponse2004
     */
    @Suppress("UNCHECKED_CAST")
    fun seenPost(body: SeenBody): InlineResponse2004 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/seen"
        )
        val response = request<InlineResponse2004>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Отправка сообщения
     * 
     * @param body Отправляет текстовое или мультимедийное сообщение контакту либо группе. Может использоваться синхронно (возвращает ответ после отправки сообщения, ответ содержит объект отправленного сообщения с идентификатором), либо асинхронно (ответ содержит результат постановки в очередь, а отправленное сообщение приходит на указанный webhook). По умолчанию используется асинхронная отправка. 
     * @return InlineResponse200
     */
    @Suppress("UNCHECKED_CAST")
    fun sendMessage(body: SendBody): InlineResponse200 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/send"
        )
        val response = request<InlineResponse200>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
